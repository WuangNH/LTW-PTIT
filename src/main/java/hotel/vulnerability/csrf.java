package hotel.vulnerability;

import hotel.data.AccountRepository;
import hotel.model.Account;
import hotel.model.Comment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.List;

@Controller
public class csrf {

    @Autowired
    private AccountRepository accountRepository;

//    @GetMapping("/tranfer")
//    public String xss(Model model,
//                      HttpSession session,
//                      HttpServletResponse response,
//                      HttpServletRequest request,
//                      @RequestParam(name = "recipient", required = false) String recipient,
//                      @RequestParam(name = "amount", required = false) Long amount) {
//        Cookie[] cookies = request.getCookies();
//
//        Account account = null;
//        // Kiểm tra xem có cookie hay không
//
//        if (session.getAttribute("currentAccount") != null) {
//            account = (Account) session.getAttribute("currentAccount");
//            System.out.println(account);
//            model.addAttribute("account", account);
//        }
//        Account ac = accountRepository.findByUsername1(recipient);
//        account = (Account) session.getAttribute("currentAccount");
//        if (ac != null) {
//            ac.setBalance(ac.getBalance() + amount);
//            account.setBalance(account.getBalance() - amount);
//            accountRepository.save(ac);
//            accountRepository.save(account);
//            System.out.println(ac.getBalance() + " " + account.getBalance());
//        }
//
//
////
//
//        return "vulnerability/tranfer";
//
//    }

    @GetMapping("/tranfer")
    public String getCsrf(Model model,
                      HttpSession session,
                      HttpServletResponse response,
                      HttpServletRequest request,
                      @RequestParam(name = "recipient", required = false) String recipient,
                      @RequestParam(name = "amount", required = false) Long amount) {
        Cookie[] cookies = request.getCookies();

        Account account = null;
        // Kiểm tra xem có cookie hay không

        if (session.getAttribute("currentAccount") != null) {
            account = (Account) session.getAttribute("currentAccount");
            System.out.println(account);
            model.addAttribute("account", account);
        }
//        Account ac = accountRepository.findByUsername1(recipient);
//        account = (Account) session.getAttribute("currentAccount");
//        if (ac != null) {
//            ac.setBalance(ac.getBalance() + amount);
//            account.setBalance(account.getBalance() - amount);
//            accountRepository.save(ac);
//            accountRepository.save(account);
//            System.out.println(ac.getBalance() + " " + account.getBalance());
//        }
//
//
////

        return "vulnerability/tranfer";

    }
    @PostMapping("/tranfer")
    public String postCsrf(Model model,
                      HttpSession session,
                      HttpServletResponse response,
                      HttpServletRequest request,
                      @RequestParam(name = "recipient", required = false) String recipient,
                      @RequestParam(name = "amount", required = false) Long amount) {
        Cookie[] cookies = request.getCookies();

        Account account = null;
        // Kiểm tra xem có cookie hay không

        if (session.getAttribute("currentAccount") != null) {
            account = (Account) session.getAttribute("currentAccount");
            System.out.println(account);
            model.addAttribute("account", account);
        }
        Account ac = accountRepository.findByUsername1(recipient);
        account = (Account) session.getAttribute("currentAccount");
        if (ac != null) {
            ac.setBalance(ac.getBalance() + amount);
            account.setBalance(account.getBalance() - amount);
            accountRepository.save(ac);
            accountRepository.save(account);
            System.out.println(ac.getBalance() + " " + account.getBalance());
        }


//

        return "vulnerability/tranfer";

    }
}
